/**
 * Partner API
 * ## Version 5.4.0-SNAPSHOT  ## Information * This service provides an API to manage partners and their related subdomains   ## Contact <b>Authors</b>   <p>     <a href=\"mailto:sdd@vaudoise.ch\">SDD</a>     <a href=\"mailto:jue@vaudoise.ch\">JUE</a>     <a href=\"mailto:gme@vaudoise.ch\">GME</a>     <a href=\"mailto:sdt@vaudoise.ch\">SDT</a>     <a href=\"mailto:hua@vaudoise.ch\">HUA</a>     <a href=\"mailto:emp@vaudoise.ch\">EMP</a>     <a href=\"mailto:rla@vaudoise.ch\">RLA</a> </p>   ___ 
 *
 * OpenAPI spec version: v5
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { PartnerStatisticsDto } from './partnerStatisticsDto';


export interface Partner { 
    /**
     * Date of the partner entry creation
     */
    creationDate?: Date;
    /**
     * Partner personal email address
     */
    email?: string;
    /**
     * Partner fax number
     */
    faxNumber?: string;
    /**
     * Indicates if the partner policy holder Id is cancelled. A partner is cancelled when a duplicate entry is found.
     */
    isCancelled?: boolean;
    /**
     * Indicates whether the partner is an injured party
     */
    isInjuredParty?: boolean;
    /**
     * Indicates whether the partner is a Vaudoise policy holder
     */
    isPolicyHolder?: boolean;
    /**
     * Indicates whether the partner gives a reason for concern (e.g. Payment delays)
     */
    isUnderMonitoring?: boolean;
    /**
     * Indicates whether the partner pays a flat rate in case this latter is liable to VAT
     */
    isVatFlatRate?: boolean;
    /**
     * Indicates whether the partner is liable to pay VAT
     */
    isVatLiable?: boolean;
    /**
     * Indicates whether the partner is VIP
     */
    isVip?: boolean;
    /**
     * Partner ISNPers
     */
    isnPers?: number;
    /**
     * Partner language
     */
    language?: string;
    /**
     * Managing agency of the policy holder
     */
    managingAgency?: string;
    /**
     * Partner mobile phone
     */
    mobilePhone?: string;
    /**
     * Partner phone
     */
    phone?: string;
    /**
     * Partner Policy Holder Id
     */
    policyHolderId: number;
    /**
     * Statistics related to the partner
     */
    statistics: PartnerStatisticsDto;
    /**
     * Partner type
     */
    type: Partner.TypeEnum;
    /**
     * Unique user id of the person who updated the partner entry
     */
    updatedBy?: number;
    /**
     * Date of the latest partner entry update
     */
    updatedDate?: Date;
    /**
     * Partner professional email address
     */
    workEmail?: string;
    /**
     * Partner work phone
     */
    workPhone?: string;
}
export namespace Partner {
    export type TypeEnum = 'person' | 'company' | 'couple';
    export const TypeEnum = {
        Person: 'person' as TypeEnum,
        Company: 'company' as TypeEnum,
        Couple: 'couple' as TypeEnum
    };
}
